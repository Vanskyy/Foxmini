version: '3.8'

services:
  # 1. 定义MySQL数据库服务
  mysql-db:                 # 服务名称，其他容器将通过这个名称访问它
    image: mysql:8.0        # 使用官方MySQL 8.0镜像，无需自己构建
    container_name: myapp-mysql-container # 容器的具体名称
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword    # 设置root用户的密码（强密码）
      MYSQL_DATABASE: Foxmini_db        # 容器启动时自动创建的数据库名
      MYSQL_USER: app_user                 # （可选）创建一个专用用户
      MYSQL_PASSWORD: userpassword         # （可选）上述专用用户的密码
    ports:
      - "3306:3306"           # 将宿主机的3306端口映射到容器的3306端口（方便用本地工具连接）
    volumes:
      # 数据持久化卷：将容器内的数据存储到宿主机，防止容器删除后数据丢失
      - mysql_data:/var/lib/mysql
      # 初始化脚本卷：将本地的SQL文件挂载到容器的初始化目录
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network           # 加入自定义网络，以便与应用容器通信
    restart: unless-stopped   # 容器退出时总是重启，除非手动停止

# 2. 定义其他服务（您的后端和前端）
# backend: ... （您的后端服务定义）
# frontend: ... （您的前端服务定义）

# 3. 定义网络和卷
networks:
  app-network:
    driver: bridge

volumes:
  mysql_data:                 # 声明一个命名卷用于持久化数据库数据